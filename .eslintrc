{
  // Based on Airbnb Code style
  "env": {
    "browser": true,
    "node": true,
    "mocha": true,
    "jquery": true,
    "commonjs": true,
    "es6": true
  },

  "globals": {
    "angular": false,
    "$": false,
    "Modernizr": false,
    "_":  false
  },

  "plugins": [
    "standard"
  ],

  "rules": {

    //
    // Possible Errors
    //
    // The following rules point out areas where you might have made mistakes.
    //
    "comma-dangle": 2, // disallow or enforce trailing commas
    "no-cond-assign": 2, // disallow assignment in conditional expressions
    "no-constant-condition": 2, // disallow use of constant expressions in conditions
    "no-control-regex": 2, // disallow control characters in regular expressions
    "no-debugger": 2, // disallow use of debugger
    "no-dupe-args": 2, // disallow duplicate arguments in functions
    "no-dupe-keys": 2, // disallow duplicate keys when creating object literals
    "no-duplicate-case": 2, // disallow a duplicate case label.
    "no-empty": 2, // disallow empty statements
    "no-empty-character-class": 2, // disallow the use of empty character classes in regular expressions
    "no-ex-assign": 2, // disallow assigning to the exception in a catch block
    "no-extra-boolean-cast": 2, // disallow double-negation boolean casts in a boolean context
    "no-extra-semi": 2, // disallow unnecessary semicolons
    "no-func-assign": 2, // disallow overwriting functions written as function declarations
    "no-inner-declarations": 2, // disallow function or variable declarations in nested blocks
    "no-invalid-regexp": 2, // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace": 2, // disallow irregular whitespace outside of strings and comments
    "no-negated-in-lhs": 2, // disallow negation of the left operand of an in expression
    "no-obj-calls": 2, // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-regex-spaces": 2, // disallow multiple spaces in a regular expression literal
    "no-sparse-arrays": 2, // disallow sparse arrays
    "no-unreachable": 2, // disallow unreachable statements after a return, throw, continue, or break statement
    "use-isnan": 2, // disallow comparisons with the value NaN
    "valid-jsdoc": [2, {  "requireParamDescription": false, "requireReturn": false }], // Ensure JSDoc comments are valid (off by default)
    "valid-typeof": 2, // Ensure that the results of typeof are compared against a valid string

    //
    // Best Practices
    //
    // These are rules designed to prevent you from making mistakes.
    // They either prescribe a better way of doing something or help you avoid footguns.
    //
    "block-scoped-var": 2, // treat var statements as if they were block scoped (off by default).
    "complexity": [2, 10], // specify the maximum cyclomatic complexity allowed in a program
    "curly": 2, // specify curly brace conventions for all control statements
    "dot-notation": [2, { "allowPattern": "^[a-z]+(_[a-z]+)+$" }], // encourages use of dot notation whenever possible
    "eqeqeq": [2, "smart"], // require the use of === and !==
    "guard-for-in": 2, // make sure for-in loops have an if statement (off by default)
    "no-alert": 2, // disallow the use of alert, confirm, and prompt
    "no-caller": 2, // disallow use of arguments.caller or arguments.callee
    "no-div-regex": 2, // disallow division operators explicitly at beginning of regular expression (off by default)
    "no-else-return": 2, // disallow else after a return in an if (off by default)
    "no-labels": 2, // disallow use of labels for anything other then loops and switches
    "no-eval": 2, // disallow use of eval()
    "no-extend-native": 2, // disallow adding to native types
    "no-extra-bind": 2, // disallow unnecessary function binding
    "no-fallthrough": 2, // disallow fallthrough of case statements
    "no-floating-decimal": 2, // disallow the use of leading or trailing decimal points in numeric literals (off by default)
    "no-implied-eval": 2, // disallow use of eval()-like methods
    "no-iterator": 2, // disallow usage of __iterator__ property
    "no-lone-blocks": 2, // disallow unnecessary nested blocks
    "no-loop-func": 2, // disallow creation of functions within loops
    "no-multi-spaces": 2, // disallow use of multiple spaces
    "no-multi-str": 2, // disallow use of multiline strings
    "no-native-reassign": 2, // disallow reassignments of native objects
    "no-new": 2, // disallow use of new operator when not part of the assignment or comparison
    "no-new-func": 2, // disallow use of new operator for Function object
    "no-new-wrappers": 2, // disallows creating new instances of String,Number, and Boolean
    "no-octal": 2, // disallow use of octal literals
    "no-octal-escape": 2, // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-proto": 2, // disallow usage of __proto__ property
    "no-redeclare": 2, // disallow declaring the same variable more then once
    "no-return-assign": 2, // disallow use of assignment in return statement
    "no-self-compare": 2, // disallow comparisons where both sides are exactly the same (off by default)
    "no-sequences": 2, // disallow use of comma operator
    "no-throw-literal": 2, // restrict what can be thrown as an exception (off by default)
    "no-unused-expressions": 2, // disallow usage of expressions in statement position
    "no-void": 2, // disallow use of void operator (off by default)
    "no-with": 2, // disallow use of the with statement
    "radix": 2, // require use of the second argument for parseInt() (off by default)
    "wrap-iife": 2, // require immediate function invocation to be wrapped in parentheses (off by default)
    "yoda": 2, // require or disallow Yoda conditions

    //
    // Variables
    //
    // These rules have to do with variable declarations.
    //
    "no-delete-var": 2, // disallow deletion of variables
    "no-label-var": 2, // disallow labels that share a name with a variable
    "no-shadow-restricted-names": 2, // disallow shadowing of names such as arguments
    "no-undef": 2, // disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undef-init": 2, // disallow use of undefined when initializing variables
    "no-unused-vars": 2, // disallow declaration of variables that are not used in the code
    "no-use-before-define": [2, "nofunc"], // disallow use of variables before they are defined

    //
    // Stylistic Issues
    //
    // These rules are purely matters of style and are quite subjective.
    //
    "brace-style": 2, // enforce one true brace style (off by default)
    "camelcase": 2, // require camel case names
    "comma-spacing": [2, { "before": false, "after": true }], // enforce spacing before and after comma
    "comma-style": [2, "last"], // enforce one true comma style
    "consistent-this": [1, "vm"], // enforces consistent naming when capturing the current execution context (off by default)
    "eol-last": 2, // enforce newline at the end of file, with no multiple empty lines
    //"indent": [2, 2, { "SwitchCase": 1 }], // specify tab or space width for your code (off by default)
    "key-spacing": [2, { "beforeColon": false, "afterColon": true }], // enforces spacing between keys and values in object literal properties
    "max-nested-callbacks": [2, 3], // specify the maximum depth callbacks can be nested (off by default)
    "new-cap": [2, { "newIsCap": true, "capIsNew": false }], // require a capital letter for constructors
    "new-parens": 2, // disallow the omission of parentheses when invoking a constructor with no arguments
    "no-array-constructor": 2, // disallow use of the Array constructor
    "no-lonely-if": 2, // disallow if as the only statement in an else block (off by default)
    "no-mixed-spaces-and-tabs": 2, // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": [2, {"max": 2}], // disallow multiple empty lines (off by default)
    "no-nested-ternary": 0, // disallow nested ternary expressions (off by default)
    "no-new-object": 2, // disallow use of the Object constructor
    "no-trailing-spaces": 2, // disallow trailing whitespace at the end of lines
    "no-extra-parens": 2, // disallow wrapping of non-IIFE statements in parens
    "one-var": [2, "never"], // allow just one var statement per function (off by default)
    "quotes": [2, "single"], // specify whether double or single quotes should be used
    "semi": [2, "always"], // require or disallow use of semicolons instead of ASI
    "semi-spacing": [2, { "before": false, "after": true }], // enforce spacing before and after semicolons
    "keyword-spacing": 2, // require a space after certain keywords (off by default)
    "space-before-blocks": [2, "always"], // require or disallow space before blocks (off by default)
    "space-before-function-paren": [2, { "anonymous": "always", "named": "never" }], // require or disallow space before function opening parenthesis (off by default)
    "space-in-parens": [2, "never"], // require or disallow spaces inside parentheses (off by default)
    "space-infix-ops": 2, // require spaces around operators
    "space-unary-ops": [2, { "words": true, "nonwords": false }], // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    "standard/object-curly-even-spacing": [2, "either"],
    "standard/array-bracket-even-spacing": [2, "either"],
    "standard/computed-property-even-spacing": [2, "even"],

    //
    // ECMAScript 6
    //
    // These rules are only relevant to ES6 environments and are off by default.
    //
    "no-var": 0, // require let or const instead of var (off by default)
    "generator-star-spacing": [0, "before"], // enforce the spacing around the * in generator functions (off by default)

    //
    // Legacy
    //
    // The following rules are included for compatibility with JSHint and JSLint.
    // While the names of the rules may not match up with the JSHint/JSLint counterpart,
    // the functionality is the same.
    //
    "max-depth": [2, 3], // specify the maximum depth that blocks can be nested (off by default)
    "max-len": [2, 120, 2, { "ignoreComments": true, "ignoreUrls": true, "ignorePattern": "^\\s*var\\s.+=\\s*require\\s*\\(" }], // specify the maximum length of a line in your program (off by default)
    "no-bitwise": 2 // disallow use of bitwise operators (off by default)

  }
}
